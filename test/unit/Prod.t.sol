// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {BasisStrategy} from "src/strategy/BasisStrategy.sol";
import {LogarithmVault} from "src/vault/LogarithmVault.sol";
import {DataProvider} from "src/DataProvider.sol";
import {GmxV2PositionManager} from "src/position/gmx/GmxV2PositionManager.sol";
import {OffChainPositionManager} from "src/position/offchain/OffChainPositionManager.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";
import {UpgradeableBeacon} from "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol";
import {ArbGasInfoMock} from "test/mock/ArbGasInfoMock.sol";
import {ArbSysMock} from "test/mock/ArbSysMock.sol";
import {IPositionManager} from "src/position/IPositionManager.sol";
import {GmxConfig} from "src/position/gmx/GmxConfig.sol";
import {ArbiAddresses} from "script/utils/ArbiAddresses.sol";

contract ProdTest is Test {
    address constant owner = 0xDaFed9a0A40f810FCb5C3dfCD0cB3486036414eb;
    address constant operator = 0xe7263f18e278ea0550FaD97DDF898d134483EfC6;
    address constant sender = 0x4F42fa2f07f81e6E1D348245EcB7EbFfC5267bE0;
    LogarithmVault gmxVault = LogarithmVault(0x4B57c9c6B58a454Def3Ad5AD0C15cF4974c818DE);
    LogarithmVault hlVault = LogarithmVault(0x6ef9500175c6ABC3952F3DFB86dE96ACD151813B);
    BasisStrategy constant gmxStrategy = BasisStrategy(0x166350f9b64ED99B2Aa92413A773aDCEDa1E1438);
    BasisStrategy constant hlStrategy = BasisStrategy(0x6f4C89Ab99Cf5f8EA938D8899a8B1bC99a8656e4);
    DataProvider constant dataProvider = DataProvider(0x8B92925a63B580A9bBD9e0D8D185aDea850160A8);
    GmxV2PositionManager constant gmxPositionManager = GmxV2PositionManager(0x5903078b87795b85388102E0881d545C0f36E231);
    OffChainPositionManager constant hlPositionManager =
        OffChainPositionManager(0x9901A001995230C20ba227bD006CFE9D4B3bee34);
    GmxConfig gmxConfig = GmxConfig(0x611169E7e9C70F23E1F9C067Ee23A3B78F3c34BF);

    UpgradeableBeacon strategyBeacon = UpgradeableBeacon(0xA610080Bf93CC031492a29D09DBC8b234F291ea7);
    UpgradeableBeacon gmxBeacon = UpgradeableBeacon(0x91544E205446E673aeC904c53BdB7cA9b892CD5E);
    address constant asset = 0xaf88d065e77c8cC2239327C5EDb3A432268e5831;

    string constant rpcUrl = "https://arb-mainnet.g.alchemy.com/v2/PeyMa7ljzBjqJxkH6AnLfVH8zRWOtE1n";

    bytes call_data =
        hex"0000000000000000000000000000000000000000000000000000000006594fa600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008883800a8e000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000006594fa60000000000000000000000000000000000000000000000000083c7f99605a2e42800000000000000000000006f38e884725a116c9c7fbf208e79fe8828a2595fcc51b9ac000000000000000000000000000000000000000000000000";
    bytes32 request = 0x3c2a45c9fa3439fdc17b5bb4ac31bd9926877f3e44ae24741f232b87df204c6a;

    function test_replay_deutilize() public {
        vm.createSelectFork(rpcUrl, 271867714);

        address _arbsys = address(new ArbSysMock());
        address _arbgasinfo = address(new ArbGasInfoMock());
        vm.etch(address(100), _arbsys.code);
        vm.etch(address(108), _arbgasinfo.code);

        (, uint256 deutilization) = gmxStrategy.pendingUtilizations();
        console.log("deutilization", deutilization);
        (uint256 amount, BasisStrategy.SwapType swapType, bytes memory swapData) =
            abi.decode(call_data, (uint256, BasisStrategy.SwapType, bytes));
        console.log("amount", amount);
        vm.startPrank(operator);
        gmxStrategy.deutilize(amount, swapType, swapData);
        DataProvider.StrategyState memory state = dataProvider.getStrategyState(address(gmxStrategy));
        _logState(state);
    }

    function test_replay_utilize() public {
        vm.createSelectFork(rpcUrl, 278783731);

        address _arbsys = address(new ArbSysMock());
        address _arbgasinfo = address(new ArbGasInfoMock());
        vm.etch(address(100), _arbsys.code);
        vm.etch(address(108), _arbgasinfo.code);

        (uint256 utilization,) = gmxStrategy.pendingUtilizations();
        console.log("utilization", utilization);
        (uint256 amount, BasisStrategy.SwapType swapType, bytes memory swapData) =
            abi.decode(call_data, (uint256, BasisStrategy.SwapType, bytes));
        console.log("amount", amount);
        vm.startPrank(operator);
        gmxStrategy.utilize(amount, swapType, swapData);

        vm.startPrank(0xC539cB358a58aC67185BaAD4d5E3f7fCfc903700);
        address(0xB0Fc2a48b873da40e7bc25658e5E6137616AC2Ee).call(
            hex"7ebc83f79b2c0ff49fa6b229412b47efbbe517a1e3a124178da3fdb1c475a0530a2280180000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000200000000000000000000000083cbb05aa78014305194450c4aadac887fe5df7f00000000000000000000000083cbb05aa78014305194450c4aadac887fe5df7f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003e00006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c7000000000000000000000000000000000000000000000000000000001eb4f416000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae900000000000000000000000000000000000000000000000000000000672c49a100000000000000000000000000000000000000000000000000000000672c49a1000000000000000000000000000000000000000000000000000066584a2626dc000000000000000000000000000000000000000000000000005af9beaaefbf4c00000000000000000000000000000000000000000000000000000000672d9b2100000000000000000000000000000000000000000000009a2849a0084eabab0000000000000000000000000000000000000000000000009a2813375ab0e5c00000000000000000000000000000000000000000000000009a2bda43cfe4c240000000000000000000000000000000000000000000000000000000000000000006036e0b653f5d1ef864272a7241b43aea6abe73ef7322b1fca37e1b2aaf6fdd9fdb07eeba1faa7852e02686f5776cd0f906947190ed62b36e1b86741b78b7db77f2651dcb6a29907180a649af22aaa35c97e7b234e0c193258ee672c7150b20ea52ab8b8c8da7530d5c6bc9a7e4ad6929742882847f5471a27e862d01b1ec525de4e82a868b97d412a6032f3465dda99dbe4f334ee51bb76a93afad86d3f7b35e59b6cba2a488168f0b3ad9655ed0bd46c616413d3fdb4589e9995f7f42deab00000000000000000000000000000000000000000000000000000000000000000650b3559eab7342cfb631e46450d8c489c917b7cc64143f38db24cd128bcd9ba739ecf1806acba7716b3345938cb7658cb4457eb013636b78d262685422b520ad47868969d8645a4be92ea63454a19ee6987666c17394d9e70fef84084c39323719767c05dd84ead599f673805ef66ce75209f70b6c14d4bd4ec63872cf018f2959d931a5e1decea3456c8401bb97cf9fbaba9afda24a614b157c9162f261dfc02c580c4ee1b714ac109fbd4e0f32b10c54ef2ab5041a551bb9369ace215220a000000000000000000000000000000000000000000000000000000000000003e000064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d961000000000000000000000000000000000000000000000000000000001dff4a01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000672c49a100000000000000000000000000000000000000000000000000000000672c49a100000000000000000000000000000000000000000000000000006658436fd11c000000000000000000000000000000000000000000000000005af8fc7d6c949000000000000000000000000000000000000000000000000000000000672d9b210000000000000000000000000000000000000000000000000de0456eecee28000000000000000000000000000000000000000000000000000de009e5d4e220000000000000000000000000000000000000000000000000000de04c1296d650000000000000000000000000000000000000000000000000000000000000000006921d650a03704724ca595152c3dcba38aff1a4d311b0cecf36dd6be31d26b622eadd06b7b6a1da3ea37411adcdb1e87548d8eb4ec3776844c9b29f57597dddf4686b370205e3aaa050d7c7f7bee3cd92724cd3071359309d6b3c6ba0663a5a41fdfedb950bf029cfd1403c50da7bdb545e1336ee1c2972ed990c5e27fc3bfbdacfc053acae21c611d87efe3778c7501601ebaf399151a7c8e6bedab913df77e47654bc9368a0d15dc21306f77bc8b70b2a645b6979d2d9e2606f89fb4d14b14f00000000000000000000000000000000000000000000000000000000000000065c344f67bdab837517a76802bca2b58fb7c3d4a7b5a3ff81540307c87c00371b751bb787c0ce7f1c96a0209207cdc202b5e938f96cb605c2bc79a3f591ed395014418a83e0f04d903ee06ecbcbde7b7587e2077bb363f3d41915ea36379f361f0b654a6534cc050628e6a407ec29b4a26671a7d13ba2d5e6c32334ae0bfbdf00362d33c2f757085c8ca6b330e66d7457a1af7cfa0203b686f5ad2462d48d2b794c671077a37493f49e99f040c3061361a302061f292326e41e7392aaa0377c95"
        );
    }

    function test_getState() public {
        vm.createSelectFork(rpcUrl);
        DataProvider.StrategyState memory state = dataProvider.getStrategyState(address(gmxStrategy));
        _logState(state);
        console.log("paused", gmxStrategy.paused());
    }

    function test_simulate_gmx_upgrade() public {
        vm.createSelectFork(rpcUrl, 278783731);

        address _arbsys = address(new ArbSysMock());
        address _arbgasinfo = address(new ArbGasInfoMock());
        vm.etch(address(100), _arbsys.code);
        vm.etch(address(108), _arbgasinfo.code);

        vm.startPrank(owner);
        gmxConfig.updateAddresses(ArbiAddresses.GMX_EXCHANGE_ROUTER, ArbiAddresses.GMX_READER);

        gmxBeacon.upgradeTo(address(new GmxV2PositionManager()));

        vm.startPrank(0x6A2B3A13be0c723674BCfd722d4e133b3f356e05);
        address(0xe68CAAACdf6439628DFD2fe624847602991A31eB).call(
            hex"7ebc83f7994af49e000f08154211f9954cad907514194478e09f1d8d86a3ecc6479b1b5d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000200000000000000000000000083cbb05aa78014305194450c4aadac887fe5df7f00000000000000000000000083cbb05aa78014305194450c4aadac887fe5df7f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003e00006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c70000000000000000000000000000000000000000000000000000000021d67b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae9000000000000000000000000000000000000000000000000000000006746d2a6000000000000000000000000000000000000000000000000000000006746d2a6000000000000000000000000000000000000000000000000000055171b76ea94000000000000000000000000000000000000000000000000003e876d33d15d3800000000000000000000000000000000000000000000000000000000674824260000000000000000000000000000000000000000000000b96adce3394ef9f6c00000000000000000000000000000000000000000000000b96aaaba228e3034c00000000000000000000000000000000000000000000000b96f51966bb86aff600000000000000000000000000000000000000000000000000000000000000006caf6df7b73f5a67e12d0820158363cb56fff40ba19b5338034e495f41d4ec4391f15b0e575764eb55ac30fb0755b9ae36d72f5dccf3391ebd73fe3f0a7b636dbf0f0063356b745d5728649f190589d143ca2147d046148f3dc42e895a642f2819fbe6bae46a1ca1d19e8522d43f66f6f45c5661ac2fc4379560775f7128d7ebadf62e93eea0e21b57befa57152c03b575724730b52f6813a5c5a22042383999068a16e02f195891e82778bfeeb420959282dddc1ede85e12dce7fe27c30523f400000000000000000000000000000000000000000000000000000000000000067f8947c8396bdfe087b5e7c7b2319b94e95db13f8200a83107fee26b6622ac1c36e3324f6722e58c8e7a5a103c4d35f20864b43b0a0ed717912851e985812dee30eb603595d3cf9ba74b074c8760d5780379ac60ca80bfc6193aaf1bb5ee0b9a73c6e36f391c9645276bc7b0681cb47545d375f7ae82f914ca00bf12a8ab8a7e0e3d9b2c83f6c96a66909dfd5d96ee789c18a0a8a14ce96f9f7ce4f0963b396112b7f672813996fae122a48ab02f959a04d33d5b79909797ba83891a0469c86000000000000000000000000000000000000000000000000000000000000003e000064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000021132202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd992000000000000000000000000000000000000000000000000000000006746d2a6000000000000000000000000000000000000000000000000000000006746d2a60000000000000000000000000000000000000000000000000000551882cb65c0000000000000000000000000000000000000000000000000003e876d33d15d3800000000000000000000000000000000000000000000000000000000674824260000000000000000000000000000000000000000000000000de0a2c51787b30c0000000000000000000000000000000000000000000000000de0754ea02aa81c0000000000000000000000000000000000000000000000000de0d03b8ee4bd980000000000000000000000000000000000000000000000000000000000000006ed9888c53645b02fdb8cacea8c2b444cabcf91c41c2bf99460f91a84a135cd7f4d49fc4a583ed2defdefbb4e4f077f24e626d5bff8ce1eccd09b3d1a0b9a95fad8684ca18a0aed96f163b2d3cfc13107ee687a119587e42e6df738f87a5c8bd66f3e6e30f7167fc12914bbc4fd7cec40ac130b51d470185c44c3350eb9e72eff894f0faa63386588bbb6c6cff4994a1939c02445c07d9cc592d4f67562b8c1e2cb80466e553f3a1e6c967552e499ec48622f205d2287be82adc159da34867c4a00000000000000000000000000000000000000000000000000000000000000064d9e0c4fb079926abc9db845dd00d0627e569f28859301884036a77032ac2447517c906f5efcb96a375346f448ae4ddcd65d90b5391b1f4e02d91777e051041a71d88e0ecf05136dfaed09a39670074a9af03b0eb3f680f9e13d7290c604b53f277ef8e562639fdaf146c7d93a506c8f7644e3e855d92b6d09b8bc1317a9077715ac7a8aa5b293495a4aad8c163eddd5066b9e4f80ca23990925ddf4305eabcf18f64391d8cc54d77c8c9a676a95543cea035165ee461cd4b4bcedb48639db3c"
        );

        DataProvider.StrategyState memory state = dataProvider.getStrategyState(address(gmxStrategy));
        _logState(state);
        console.log("paused", gmxStrategy.paused());
    }

    function _logState(DataProvider.StrategyState memory state) internal view {
        // log all strategy state
        console.log("strategyStatus: ", state.strategyStatus);
        console.log("totalSupply: ", state.totalSupply);
        console.log("totalAssets: ", state.totalAssets);
        console.log("utilizedAssets: ", state.utilizedAssets);
        console.log("idleAssets: ", state.idleAssets);
        console.log("assetBalance: ", state.assetBalance);
        console.log("productBalance: ", state.productBalance);
        console.log("productValueInAsset: ", state.productValueInAsset);
        console.log("assetsToWithdraw: ", state.assetsToWithdraw);
        console.log("assetsToClaim: ", state.assetsToClaim);
        console.log("totalPendingWithdraw: ", vm.toString(state.totalPendingWithdraw));
        console.log("pendingIncreaseCollateral: ", state.pendingIncreaseCollateral);
        console.log("pendingDecreaseCollateral: ", state.pendingDecreaseCollateral);
        console.log("pendingUtilization: ", state.pendingUtilization);
        console.log("pendingDeutilization: ", state.pendingDeutilization);
        console.log("accRequestedWithdrawAssets: ", state.accRequestedWithdrawAssets);
        console.log("processedWithdrawAssets: ", state.processedWithdrawAssets);
        console.log("positionNetBalance: ", state.positionNetBalance);
        console.log("positionLeverage: ", state.positionLeverage);
        console.log("positionSizeInTokens: ", state.positionSizeInTokens);
        console.log("upkeepNeeded: ", state.upkeepNeeded);
        console.log("rebalanceUpNeeded: ", state.rebalanceUpNeeded);
        console.log("rebalanceDownNeeded: ", state.rebalanceDownNeeded);
        console.log("deleverageNeeded: ", state.deleverageNeeded);
        console.log("decreaseCollateral: ", state.decreaseCollateral);
        console.log("rehedgeNeeded: ", state.rehedgeNeeded);
        console.log("positionManagerKeepNeeded: ", state.positionManagerKeepNeeded);
        console.log("processingRebalanceDown: ", state.processingRebalanceDown);
    }
}
